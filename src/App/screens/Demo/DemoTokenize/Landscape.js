import React from 'react';
import Color from 'color';
import {
  Svg,
  Defs,
  RadialGradient,
  Circle,
  Rect,
  LinearGradient,
  Stop,
  Path,
} from 'react-native-svg';
import gen from 'random-seed';

// https://kwa.ng/procedurally-generated-svg-landscapes/
// Modified code to work for react native, just using this as an demo of an sudo-unique asset that can be regenerated by data stored on the chain.
export default function Landscape({ seed }) {
  const offsetY = 200;
  const layerHeight = 150;
  const layerWidth = 600;
  const baseColor = Color('#0ca4fb');
  const layers = 6;
  const rand = gen(seed);

  let sunX = rand.random() * 0.5 + 0.25;
  let sunY = rand.random() * 0.1 + 0.1;

  let defs = [];
  let paths = [];

  for (let layer = 1; layer <= layers; layer++) {
    let layerAnchorY =
      layer * (layerHeight / layers) +
      offsetY +
      rand.random() * (layerHeight / layers);
    let coord = `M 0 ${layerAnchorY} `;

    // back layers have higher peaks for more mountainous effect
    let amplitude =
      rand.random() * (layerHeight / layers) + layerHeight / layer / layers;
    let freq1 = (rand.random() * 0.02 * layer) / layers + 0.005;
    let freq2 = rand.random() * 0.01 + 0.005;
    let phase1 = rand.random() * 500;
    let phase2 = phase1 + rand.random() * 250;

    for (let i = 0; i < layerWidth + 1; i++) {
      coord += `H ${i} V ${
        Math.sin(freq1 * (i + phase1)) * amplitude + // base
        (Math.sin(freq2 * (i + phase2)) * amplitude) / 2 + // interference
        (Math.sin((i * layer) / 5) * Math.log(layer)) / 4 + // detail
        (Math.sin((i * layer) / 3) * Math.log(layer * 2, 10)) / 2 + // detail
        Math.sin((i * layer) / 2) * (Math.log(layer, 2) * 1.5) + // more detail
        (layerAnchorY - layerHeight)
      } `;
    }

    coord += `V ${layerAnchorY} L 0 ${layerAnchorY}`;
    defs.push(
      <RadialGradient
        id={`fill${layer}`}
        cx={sunX}
        cy={`${sunY / 2 - (layer - 1) / Math.pow(layers, 2)}`}
      >
        <Stop
          offset="0%"
          stopColor={baseColor
            .rotate(120)
            .saturate(0.3)
            .lighten(0.3)
            .desaturate(0.1 * layer)
            .darken(0.1 * layer)
            .string()}
        />
        <Stop
          offset={`${20 / layer}%`}
          stopColor={baseColor
            .saturate(0.3)
            .desaturate(layer / layers / 4)
            .darken(layer / layers / 2)
            .rotate(120 - 45 * (layer / layers))
            .string()}
        />
        <Stop
          offset="100%"
          stopColor={baseColor
            .saturate(layer / layers / 2.5)
            .darken(layer / layers)
            .string()}
        />
      </RadialGradient>
    );
    paths.push(<Path d={coord} fill={`url(#fill${layer})`} />);
  }

  return (
    <Svg
      width="100%"
      height="400"
      viewBox={`0 0 ${layerWidth} 300`}
      xmlns="http://www.w3.org/2000/svg"
    >
      <Defs>
        <RadialGradient id="fillBg" cx={sunX} cy={sunY}>
          <Stop
            offset={0}
            stopColor={baseColor.rotate(240).desaturate(1).lighten(1).string()}
          />
          <Stop
            offset={'5%'}
            stopColor={baseColor.rotate(240).lighten(0.7).string()}
          />
          <Stop
            offset={'20%'}
            stopColor={baseColor
              .rotate(120)
              .desaturate(0.5)
              .lighten(0.4)
              .string()}
          />
          <Stop
            offset="60%"
            stopColor={baseColor
              .rotate(0)
              .desaturate(0.5)
              .lighten(0.2)
              .string()}
          />
          <Stop
            offset="90%"
            stopColor={baseColor.rotate(0).desaturate(0.5).darken(0.1).string()}
          />
          <Stop
            offset="100%"
            stopColor={baseColor.rotate(0).desaturate(0.5).darken(0.2).string()}
          />
        </RadialGradient>
        {defs}
        <LinearGradient id="fog" x1="0%" y1="0%" x2="0%" y2="100%">
          <Stop
            offset="0%"
            stopColor="rgb(255,255,255)"
            stopOpacity={`${1 - sunY * 3}`}
          />
          <Stop offset="100%" stopColor="rgb(255,255,255)" stopOpacity="0" />
        </LinearGradient>
      </Defs>
      <Rect
        filter="url(#noise)"
        x="0"
        y="0"
        width="100%"
        height="300"
        fill="url(#fillBg)"
      />
      <Circle
        cx={`${sunX * layerWidth}`}
        cy={`${sunY * 300}`}
        r="20"
        fill={baseColor.rotate(180).desaturate(0.8).lighten(0.8).string()}
      />
      {paths.slice(0, 3)}
      <Rect x="0" y="0" width="100%" height="300" fill="url(#fog)" />
      {paths.slice(3)}
    </Svg>
  );
}
